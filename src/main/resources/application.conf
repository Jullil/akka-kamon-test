//http {
//  host = "0.0.0.0"
//  port = 3001
//}

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

//  log-dead-letters = 1
//  log-dead-letters-during-shutdown = off
}

akka.actor {
  provider = "akka.cluster.ClusterActorRefProvider"
//  debug {
//    # enable function of LoggingReceive, which is to log any received message at
//    # DEBUG level
//    receive = off
//    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
//    autoreceive = on
//    # enable DEBUG logging of actor lifecycle changes
//    lifecycle = on
//    # enable DEBUG logging of unhandled messages
//    unhandled = on
//    # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
//    fsm = on
//    # enable DEBUG logging of subscription changes on the eventStream
//    event-stream = on
//  }
}

akka.remote {
  # If this is "on", Akka will log all outbound messages at DEBUG level,
  # if off then they are not logged
  #log-sent-messages = on
  # If this is "on", Akka will log all inbound messages at DEBUG level,
  # if off then they are not logged
  #log-remote-lifecycle-events = on

//  log-frame-size-exceeding = 5megabyte

  netty.tcp {
    hostname = "127.0.0.1"
    port = 2551

//    # Sets the send buffer size of the Sockets
//    send-buffer-size = 30megabyte
//    # Sets the receive buffer size of the Sockets
//    receive-buffer-size = 30megabyte
//    # Maximum message size the transport will accept, but at least 32000 bytes.
//    maximum-frame-size = 30megabyte
  }
}
akka.cluster {
  seed-nodes = ["akka.tcp://test-actor-system@127.0.0.1:2551"]
  #min-nr-of-members = 1
  #roles = [frontend]
  # Should the 'leader' in the cluster be allowed to automatically mark
  # unreachable nodes as DOWN after a configured time of unreachability?
  #auto-down-unreachable-after = 10s
}
//
//akka.actor.worker-custom-dispatcher {
//  type = Dispatcher
//  executor = "fork-join-executor"
//  fork-join-executor {
//    parallelism-min = 1
//    parallelism-factor = 2.0
//    parallelism-max = 16
//  }
//  # Throughput defines the maximum number of messages to be
//  # processed per actor before the thread jumps to the next actor.
//  # Set to 1 for as fair as possible.
//  throughput = 1
//}

akka.actor.deployment {
  /workerRouter = {
    # Router type provided by metrics extension.
    #router = cluster-metrics-adaptive-pool
    #metrics-selector = mix # heap, load, cpu, mix
    router = round-robin-pool

    cluster {
      enabled = on
      allow-local-routees = on
//      max-nr-of-instances-per-node = 16
    }
  }
}

# disable legacy metrics in akka-cluster, since it is still enabled in akka-cluster by default
//akka.cluster.metrics.enabled = off
# Enable metrics extension in akka-cluster-metrics.
//akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
//akka.cluster.metrics.native-library-extract-folder = ${user.dir}/native

# Kamon Metrics
# ~~~~~~~~~~~~~~
//kamon {
//  trace.sampling = all
//
//  metric {
//    tick-interval = 10 second
//    filters {
//      akka-actor {
//        includes = ["**"]
//        excludes = ["kamon/**"]
//      }
//
//      akka-dispatcher {
//        includes = ["**"]
//        excludes = ["kamon/**"]
//      }
//
//      akka-router {
//        includes = ["**"]
//        excludes = ["kamon/**"]
//      }
//
//      system-metric {
//        includes = ["**"]
//        excludes = []
//      }
//
//      trace {
//        includes = ["**"]
//        excludes = []
//      }
//    }
//  }
//}
